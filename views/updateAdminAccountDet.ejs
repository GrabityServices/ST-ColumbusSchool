<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Update Admin Details</title>
    <style>
      :root{
        --main-bg-color: radial-gradient(125% 125% at 50% 10%, #000000 40%, #010133 100%);
        --form-bg-color: linear-gradient(135deg, rgba(42, 42, 42, 0.8) 0%, rgba(74, 74, 74, 0.6) 100%);
        --label-text-color: rgba(255, 255, 255, 0.87);
        --input-bg-color: #0000004d;;
        --input-text-color: white;
        --input-border-color: rgba(255, 255, 255, 0.5);
      }

      * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
      }

      body {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
        background-color: #000;
        background-image: var(--main-bg-color);
      }

      .form-container {
        padding: 30px;
        border-radius: 12px;
        box-shadow: 0 6px 15px rgba(0, 0, 0, 0.15);
        max-width: 500px;
        width: 100%;
        background-image: var(--form-bg-color);
        color: white;
      }

      h2 {
        text-align: center;
        margin-bottom: 2rem;
      }

      .input-group {
        margin-bottom: 18px;
      }

      .input-group label {
        font-size: 1.1rem;
        display: block;
        margin-bottom: 8px;
        font-weight: 600;
        color: var(--label-text-color);
      }

      .input-group input {
        width: 100%;
        padding: 10px 12px;
        border: 1px solid var(--input-border-color);
        border-radius: 6px;
        font-size: 1rem;
        font-family: inherit;
        color: var(--input-text-color);
        background-color: var(--input-bg-color);
      }

      .input-group input:focus {
        border-color: #4285f4;
        outline: none;
        box-shadow: 0 0 6px rgba(66, 133, 244, 0.4);
      }

      .error {
        color: red;
        font-size: 0.9rem;
        margin-top: 5px;
        display: none;
      }

      .submit-btn {
        width: 100%;
        padding: 12px;
        color: #fff;
        background-color: #4285f4;
        font-size: 16px;
        font-weight: bold;
        border: none;
        border-radius: 8px;
        cursor: pointer;
      }

      .submit-btn:hover {
        background-color: #3367d6;
      }

      @media (max-width: 1000px) {
        body {
          min-height: 85vh;
        }
        .form-container {
          margin: 10px;
          padding: 40px 25px;
        }
      }
    </style>
  </head>
  <body>
    <div class="form-container">
      <h2>Update Admin Details</h2>
      <form id="adminForm" action="/stcolumbus/jaj/ekdara/admin/update/det/<%=id%>" method="POST">
        <div class="input-group">
          <label for="ftName">First Name</label>
          <input type="text" name="FirstName" id="ftName" required placeholder="Enter first name" />
          <div class="error" id="ftNameError">First name must be 3-30 letters only.</div>
        </div>

        <div class="input-group">
          <label for="lsName">Last Name</label>
          <input type="text" name="LastName" id="lsName" required placeholder="Enter last name" />
          <div class="error" id="lsNameError">Last name must be 3-30 letters only.</div>
        </div>

        <div class="input-group">
          <label for="email">Email</label>
          <input type="email" name="email" id="email" required placeholder="Enter email address" />
          <div class="error" id="emailError">Enter a valid email address.</div>
        </div>

        <button type="submit" class="submit-btn">Update Admin</button>
      </form>
    </div>

    <script>
      // Regex rules
      const regexRules = {
        name: /^[A-Za-z]{3,30}$/, // 3-30 letters only
        email: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/, // Valid email
      };

      const form = document.getElementById("adminForm");
      const ftName = document.getElementById("ftName");
      const lsName = document.getElementById("lsName");
      const email = document.getElementById("email");

      const ftNameError = document.getElementById("ftNameError");
      const lsNameError = document.getElementById("lsNameError");
      const emailError = document.getElementById("emailError");

      // Validation function
      function validateInput(input, regex, errorElement) {
        if (!regex.test(input.value.trim())) {
          errorElement.style.display = "block";
          return false;
        } else {
          errorElement.style.display = "none";
          return true;
        }
      }

      // Real-time validation
      ftName.addEventListener("input", () => validateInput(ftName, regexRules.name, ftNameError));
      lsName.addEventListener("input", () => validateInput(lsName, regexRules.name, lsNameError));
      email.addEventListener("input", () => validateInput(email, regexRules.email, emailError));

      // Form submit validation
      form.addEventListener("submit", function (e) {
        let valid = true;

        if (!validateInput(ftName, regexRules.name, ftNameError)) valid = false;
        if (!validateInput(lsName, regexRules.name, lsNameError)) valid = false;
        if (!validateInput(email, regexRules.email, emailError)) valid = false;

        if (!valid) {
          e.preventDefault(); // stop form submission
        }
      });
    </script>
  </body>
</html>
